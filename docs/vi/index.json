[{"uri":"https://QuocTrong21.github.io/FCJ-Workshop/vi/1-introduce/","title":"Giới thiệu","tags":[],"description":"","content":"Trong bối cảnh phát triển và vận hành hệ thống hiện đại, đặc biệt với các ứng dụng web Java chạy trên nền tảng AWS, yêu cầu triển khai nhanh, bảo mật cao, khả năng mở rộng và sẵn sàng 24/7 đã trở thành tiêu chuẩn bắt buộc.\nViệc cấu hình hạ tầng thủ công tiềm ẩn nhiều rủi ro:\n Mất thời gian Thiếu tính nhất quán Khó quản lý phiên bản cấu hình Khó kiểm soát rollback khi gặp sự cố   ⚙️ Network Automation là gì? Network Automation là việc sử dụng công cụ và mã lệnh (scripts) để tự động hoá quá trình tạo lập, cấu hình, giám sát và quản lý hạ tầng mạng.\nVới AWS, điều này bao gồm:\n Provisioning: Tự động tạo VPC, Subnet, Internet Gateway, Route Table, Security Group Configuration: Cấu hình quyền truy cập, port, rule bảo mật Monitoring: Giám sát lưu lượng, CPU, kết nối Rollback: Khôi phục nhanh khi triển khai lỗi   🛠 Công cụ chính trong dự án  AWS CLI – Chạy script tạo và cấu hình mạng qua dòng lệnh AWS SDK for Java – Tích hợp quản lý hạ tầng trực tiếp từ ứng dụng Java AWS CloudFormation – Mô tả toàn bộ hạ tầng bằng file YAML (Infrastructure as Code – IaC)   🎯 Mục tiêu Workshop Workshop này sẽ giúp bạn:\n Hiểu cách tự động hoá toàn bộ hạ tầng mạng AWS cho ứng dụng web Java Triển khai nhanh, chuẩn xác, ít lỗi hơn so với thao tác thủ công Kết hợp CLI, Java SDK và CloudFormation để đạt hiệu quả tối đa Nắm được quy trình rollback, testing và quản lý phiên bản cấu hình   ✅ Provisioning \u0026amp; Configuration Tự động tạo và cấu hình mạng từ 0 → hệ thống sẵn sàng chạy ứng dụng web Java\n✅ Monitoring \u0026amp; Alerting Tích hợp CloudWatch Alarm và SNS để giám sát và cảnh báo kịp thời\n✅ Rollback \u0026amp; Version Control Dễ dàng quay lại trạng thái ổn định khi triển khai lỗi, quản lý lịch sử cấu hình với Git\n 📚 Nội dung Workshop  Giới thiệu kiến trúc hệ thống Chuẩn bị môi trường Automation với AWS CLI Infrastructure as Code với CloudFormation AWS SDK for Java – Quản lý mạng và giám sát Triển khai giám sát \u0026amp; cảnh báo Kiểm thử \u0026amp; Rollback   🧠 Mục tiêu cuối cùng: Xây dựng framework Network Automation hoàn chỉnh trên AWS cho ứng dụng web Java – nhanh, bảo mật, sẵn sàng mở rộng và dễ quản lý.\n "},{"uri":"https://QuocTrong21.github.io/FCJ-Workshop/vi/2-prerequiste/2.1.1-createiam/","title":"Tạo IAM User và lấy Access Key, Secret Access Key, Public Key","tags":[],"description":"","content":"1. Tạo IAM User và lấy Access Key, Secret Access Key, Public Key Để làm việc với AWS CLI, AWS SDK hoặc CloudFormation, bước đầu tiên là tạo một IAM User có quyền truy cập phù hợp và lấy thông tin Access Key, Secret Access Key để cấu hình.\n Các bước thực hiện  Đăng nhập AWS Management Console với quyền Admin. Vào IAM \u0026gt; Users \u0026gt; Add user. Nhập tên user (ví dụ: network-automation-user). Chọn Programmatic access để tạo Access Key và Secret Access Key. Gán quyền phù hợp, ví dụ:  AmazonEC2FullAccess AmazonVPCFullAccess IAMReadOnlyAccess AdministratorAccess (nếu test)   Nhấn Create user và tải file CSV chứa Access Key, Secret Access Key. Tạo hoặc import Key Pair trong EC2 để SSH (nếu cần).   Lưu ý quan trọng  Bảo mật Access Key và Secret Key: Không chia sẻ hoặc để lộ công khai. Nếu user có quyền rộng (AdministratorAccess), chỉ nên dùng trong môi trường thử nghiệm. Nên sử dụng IAM Role cho EC2 khi có thể để tránh dùng Access Key trực tiếp.   Tham khảo thêm  Hướng dẫn tạo IAM User trên AWS Quản lý Access Key cho IAM User Key Pairs for Amazon EC2  "},{"uri":"https://QuocTrong21.github.io/FCJ-Workshop/vi/","title":"Tổng quan – Network Automation với AWS CLI, AWS SDK (Java), CloudFormation","tags":[],"description":"","content":"Network Automation với AWS CLI, AWS SDK for Java, và CloudFormation Tổng quan Đề tài này tập trung vào việc tự động hoá hạ tầng mạng (Network Automation) trên AWS cho hệ thống web Java.\nGiải pháp sử dụng kết hợp AWS CLI, AWS SDK for Java, và AWS CloudFormation để:\n Provisioning: Tự động tạo VPC, Subnet, Security Group, EC2. Configuration: Cấu hình tài nguyên mạng qua CLI và Java SDK. Monitoring: Giám sát hệ thống bằng CloudWatch Alarm, gửi cảnh báo qua SNS. Rollback: Khôi phục khi triển khai gặp lỗi. Documentation: Ghi lại quy trình và kiến trúc.  Hướng tiếp cận này giúp giảm thiểu thao tác thủ công, đảm bảo tính nhất quán, và tăng tốc độ triển khai hạ tầng cho dự án web Java (ví dụ: web xem phim).\nNội dung  Introduction Yêu cầu Chuẩn bị Tự động hoá bằng AWS CLI Triển khai IaC với CloudFormation Quản lý Mạng qua AWS SDK for Java Dọn dẹp Tài nguyên  "},{"uri":"https://QuocTrong21.github.io/FCJ-Workshop/vi/2-prerequiste/2.1.2-createec2/","title":" Hướng Dẫn Tạo EC2 Instance Trên AWS","tags":[],"description":"","content":"📌 Mục Tiêu Tạo một EC2 instance sử dụng cấu hình mặc định để triển khai ứng dụng hoặc kiểm thử môi trường.\n🧰 Yêu Cầu Trước Khi Bắt Đầu  Tài khoản AWS hợp lệ Đăng nhập AWS Console hoặc cài sẵn AWS CLI Tạo key pair để SSH (nếu cần)  🛠️ Các Bước Thực Hiện 1. Đăng Nhập AWS Console Truy cập: https://console.aws.amazon.com/ec2/\n2. Tạo EC2 Instance Cách 1: Qua AWS Console  Vào EC2 Dashboard Nhấn Launch Instance Nhập tên: workshop Chọn AMI: Amazon Linux 2023 (hoặc Amazon Linux 2) Loại Instance: t2.micro (Free tier) Key pair: Chọn hoặc tạo mới Network Settings:  Allow SSH (port 22) Allow HTTP (port 80) nếu cần   Ổ đĩa: Mặc định 8 GB (gp2) Nhấn Launch Instance   🧰 3. Cài Đặt AWS CLI Trên Linux Chạy các lệnh sau để cài đặt AWS CLI v2:\n# Tải AWS CLI v2 curl \u0026#34;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\u0026#34; -o \u0026#34;awscliv2.zip\u0026#34; # Giải nén unzip awscliv2.zip # Cài đặt sudo ./aws/install # Kiểm tra phiên bản aws --version  ⚙️ 4. Cấu Hình AWS CLI Sau khi cài đặt, chạy lệnh sau để cấu hình thông tin tài khoản:\naws configure Nhập các thông tin:\n AWS Access Key ID: từ IAM user AWS Secret Access Key: từ IAM user Default region name: ap-northeast-1 (hoặc vùng bạn sử dụng) Default output format: json   ✅ Kết Quả  EC2 instance được tạo và chạy trong vài phút. Có thể SSH để cài đặt thêm hoặc triển khai ứng dụng.  🧹 Mẹo Quản Lý  Tắt hoặc terminate instance sau khi dùng để tránh mất phí. Gắn Elastic IP nếu muốn giữ IP cố định.  📚 Tài Liệu Tham Khảo  EC2 User Guide Amazon Linux AMI  "},{"uri":"https://QuocTrong21.github.io/FCJ-Workshop/vi/2-prerequiste/","title":"Các bước Chuẩn bị Môi trường cho Network Automation trên AWS","tags":[],"description":"","content":"\rĐể thực hiện tự động hóa mạng trên AWS, bạn cần chuẩn bị một môi trường bao gồm AWS CLI để tương tác với AWS bằng dòng lệnh, AWS SDK (Java) để lập trình tự động quản lý tài nguyên mạng, và AWS CloudFormation để mô hình hóa và triển khai hạ tầng mạng dưới dạng Infrastructure as Code (IaC).\n\r 💡 Nếu bạn chưa quen với các công cụ và dịch vụ trong hướng dẫn này, hãy xem thêm:\n  AWS Command Line Interface (CLI) - Tổng quan và cài đặt AWS SDK for Java - Tài liệu chính thức AWS CloudFormation - Hướng dẫn cơ bản   🚀 Nội dung Thực hiện Trong phần này, bạn sẽ từng bước xây dựng môi trường để tự động hóa mạng trên AWS:\n  Tạo IAM User và lấy Access Key, Secret Access Key, Public Key\n→ Tạo IAM User, cấu hình thông tin xác thực (access key, secret key).\n  Tạo EC2 Instance và cài đặt AWS CLI\n→ Tạo EC2, chọn instance phù hợp, cấu hình (VPC, Subnet, Security Group),chọn hoặc tạo một keypair để SSH vào instance và launch instance.\n   👉 Sau khi hoàn thành các bước này, bạn sẽ có một môi trường đầy đủ để phát triển và triển khai giải pháp tự động hóa mạng trên nền tảng AWS một cách hiệu quả và chuyên nghiệp.\n"},{"uri":"https://QuocTrong21.github.io/FCJ-Workshop/vi/3-awscli/","title":"Tự động hóa bằng AWS CLI","tags":[],"description":"","content":"Viết Script AWS CLI Tạo Mạng và EC2  1. Tạo VPC VPC_ID=$(aws ec2 create-vpc \\  --cidr-block 10.0.0.0/16 \\  --query \u0026#39;Vpc.VpcId\u0026#39; \\  --output text) echo \u0026#34;VPC ID: $VPC_ID\u0026#34; aws ec2 create-tags --resources $VPC_ID --tags Key=Name,Value=MovieVPC  2. Tạo Subnet Tạo subnet con trong VPC vừa tạo, xác định vùng Availability Zone và CIDR cho subnet này.\nSUBNET_ID=$(aws ec2 create-subnet \\  --vpc-id $VPC_ID \\  --cidr-block 10.0.1.0/24 \\  --availability-zone ap-southeast-1a \\  --query \u0026#39;Subnet.SubnetId\u0026#39; \\  --output text) echo \u0026#34;Subnet ID: $SUBNET_ID\u0026#34;  3. Tạo Internet Gateway và gắn vào VPC Tạo Internet Gateway để cho phép kết nối Internet cho VPC và gắn nó vào VPC đã tạo.\nIGW_ID=$(aws ec2 create-internet-gateway \\  --query \u0026#39;InternetGateway.InternetGatewayId\u0026#39; \\  --output text) aws ec2 attach-internet-gateway \\  --internet-gateway-id $IGW_ID \\  --vpc-id $VPC_ID # Tag IGW aws ec2 create-tags --resources $IGW_ID --tags Key=Name,Value=MovieIGW  4. Tạo Route Table và cấu hình route internet Tạo Route Table cho VPC, thêm route để chuyển hướng lưu lượng Internet ra Internet Gateway, và liên kết Route Table này với subnet. Bật chế độ auto-assign public IP cho subnet.\nRT_ID=$(aws ec2 create-route-table \\  --vpc-id $VPC_ID \\  --query \u0026#39;RouteTable.RouteTableId\u0026#39; \\  --output text) # Gán route 0.0.0.0/0 đến IGW aws ec2 create-route \\  --route-table-id $RT_ID \\  --destination-cidr-block 0.0.0.0/0 \\  --gateway-id $IGW_ID # Associate với subnet aws ec2 associate-route-table \\  --route-table-id $RT_ID \\  --subnet-id $SUBNET_ID # Enable auto-assign public IP aws ec2 modify-subnet-attribute --subnet-id $SUBNET_ID --map-public-ip-on-launch  5. Tạo Security Group Tạo Security Group mới gán cho VPC với các quy tắc cho phép các port cần thiết như SSH, HTTP, HTTPS và MySQL.\nSG_ID=$(aws ec2 create-security-group \\  --group-name MovieSG \\  --description \u0026#34;Allow HTTP, HTTPS, SSH, MySQL\u0026#34; \\  --vpc-id $VPC_ID \\  --query \u0026#39;GroupId\u0026#39; --output text) # Mở các port cần thiết aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 22 --cidr 0.0.0.0/0 aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 80 --cidr 0.0.0.0/0 aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 443 --cidr 0.0.0.0/0 aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 3306 --cidr 10.0.0.0/16 echo \u0026#34;Security Group ID: $SG_ID\u0026#34;  6. Tạo Key Pair Tạo Key Pair để dùng khi SSH kết nối đến EC2 Instance, lưu lại private key để bảo mật.\naws ec2 create-key-pair --key-name MovieKey \\  --query \u0026#39;KeyMaterial\u0026#39; --output text \u0026gt; MovieKey.pem chmod 400 MovieKey.pem  7. Tạo EC2 Instance Khởi tạo EC2 Instance trong subnet đã tạo, gán Security Group và Key Pair để quản lý, đồng thời cấp phát địa chỉ IP công cộng.\nINSTANCE_ID=$(aws ec2 run-instances \\  --image-id ami-0df7a207adb9748c7 \\  # Amazon Linux 2 (hoặc Ubuntu tùy vùng) --instance-type t2.micro \\  --key-name MovieKey \\  --security-group-ids $SG_ID \\  --subnet-id $SUBNET_ID \\  --associate-public-ip-address \\  --query \u0026#39;Instances[0].InstanceId\u0026#39; \\  --output text) echo \u0026#34;EC2 Instance ID: $INSTANCE_ID\u0026#34;  8. Lấy Public IP của EC2 Instance Sau khi EC2 chạy, lấy địa chỉ IP công cộng để có thể truy cập hoặc SSH vào máy chủ.\naws ec2 describe-instances --instance-ids $INSTANCE_ID \\  --query \u0026#39;Reservations[0].Instances[0].PublicIpAddress\u0026#39; --output text  Bạn có thể tổng hợp các bước trên thành một script AWS CLI để tự động hóa toàn bộ quy trình.\n"},{"uri":"https://QuocTrong21.github.io/FCJ-Workshop/vi/4-cloudformation/","title":"Triển khai Mạng AWS bằng CloudFormation (IaC)","tags":[],"description":"","content":"1. Viết file network.yaml  Chuẩn bị file cấu hình CloudFormation mô tả các tài nguyên mạng cần thiết. Đảm bảo các thành phần mạng được khai báo rõ ràng và đầy đủ.  AWSTemplateFormatVersion: \u0026#39;2010-09-09\u0026#39; Description: Network stack for Movie Web in Sydney Resources: MovieVPC: Type: AWS::EC2::VPC Properties: CidrBlock: 10.0.0.0/16 EnableDnsSupport: true EnableDnsHostnames: true Tags: - Key: Name Value: MovieVPC PublicSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref MovieVPC CidrBlock: 10.0.1.0/24 AvailabilityZone: ap-southeast-2a MapPublicIpOnLaunch: true Tags: - Key: Name Value: PublicSubnet InternetGateway: Type: AWS::EC2::InternetGateway Properties: Tags: - Key: Name Value: MovieIGW AttachGateway: Type: AWS::EC2::VPCGatewayAttachment Properties: VpcId: !Ref MovieVPC InternetGatewayId: !Ref InternetGateway PublicRouteTable: Type: AWS::EC2::RouteTable Properties: VpcId: !Ref MovieVPC Tags: - Key: Name Value: PublicRouteTable PublicRoute: Type: AWS::EC2::Route DependsOn: AttachGateway Properties: RouteTableId: !Ref PublicRouteTable DestinationCidrBlock: 0.0.0.0/0 GatewayId: !Ref InternetGateway SubnetRouteTableAssociation: Type: AWS::EC2::SubnetRouteTableAssociation Properties: SubnetId: !Ref PublicSubnet RouteTableId: !Ref PublicRouteTable MovieSecurityGroup: Type: AWS::EC2::SecurityGroup Properties: GroupDescription: Allow SSH and HTTP VpcId: !Ref MovieVPC SecurityGroupIngress: - IpProtocol: tcp FromPort: 22 ToPort: 22 CidrIp: 0.0.0.0/0 - IpProtocol: tcp FromPort: 80 ToPort: 80 CidrIp: 0.0.0.0/0 Tags: - Key: Name Value: MovieSG Outputs: VPCId: Description: VPC ID Value: !Ref MovieVPC SubnetId: Description: Public Subnet ID Value: !Ref PublicSubnet SecurityGroupId: Description: Security Group ID Value: !Ref MovieSecurityGroup  2. Triển khai stack  Dùng lệnh aws cloudformation deploy để tạo stack từ file network.yaml. Đặt tên stack rõ ràng, ví dụ: MyNetworkStack. Cung cấp quyền phù hợp khi deploy nếu có tài nguyên liên quan đến IAM.  aws cloudformation deploy \\  --template-file network.yaml \\  --stack-name movie-web-network \\  --region ap-southeast-2 \\  --capabilities CAPABILITY_NAMED_IAM  3. Kiểm tra trạng thái stack  Theo dõi trạng thái stack để biết quá trình triển khai thành công hay gặp lỗi. Sử dụng các lệnh AWS CLI hoặc trên Console để xem chi tiết các sự kiện của stack.  aws cloudformation describe-stacks --stack-name movie-web-network --query \u0026#39;Stacks[0].StackStatus\u0026#39; --output text aws cloudformation describe-stack-events --stack-name movie-web-network --max-items 50  3.Thử tạo lỗi có chủ ý  Thay đổi một tham số hoặc tài nguyên không hợp lệ (ví dụ AMI không tồn tại) trong file network.yaml. Triển khai lại stack và quan sát quá trình rollback tự động của CloudFormation. Dùng thông tin sự kiện để debug và hiểu cách CloudFormation xử lý lỗi.  aws cloudformation deploy \\  --template-file network.yaml \\  --stack-name movie-web-network-testfail \\  --parameter-overrides KeyPairName=MovieKey ImageId=ami-00000000 InstanceType=t3.small \\  --capabilities CAPABILITY_IAM  "},{"uri":"https://QuocTrong21.github.io/FCJ-Workshop/vi/5-java-sdk/","title":"Sử dụng AWS SDK for Java để điều khiển AWS","tags":[],"description":"","content":"5. Sử dụng AWS SDK for Java 5.1. Mục tiêu  Viết mã Java để tự động điều khiển các tài nguyên AWS như tạo Security Group, thiết lập CloudWatch Alarm, và gửi thông báo SNS. Tăng cường tự động hóa và giám sát hệ thống AWS bằng ứng dụng Java.   5.2. Cấu trúc Project  Tạo project Maven sử dụng AWS SDK for Java (phiên bản 2.x). Thêm các dependency cần thiết bao gồm:  EC2 client để quản lý Security Group. CloudWatch client để tạo và quản lý Alarm. SNS client để gửi thông báo khi Alarm được kích hoạt.     5.3. Các bước thực hiện   Setup project và AWS SDK\nKhởi tạo Maven project. \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;groupId\u0026gt;com.movie.aws\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;aws-networking\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0\u0026lt;/version\u0026gt; \u0026lt;dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;software.amazon.awssdk\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;bom\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.25.24\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;software.amazon.awssdk\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;ec2\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;software.amazon.awssdk\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;cloudwatch\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;software.amazon.awssdk\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;sns\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-compiler-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.8.1\u0026lt;/version\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;source\u0026gt;17\u0026lt;/source\u0026gt; \u0026lt;target\u0026gt;17\u0026lt;/target\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; \u0026lt;/project\u0026gt;  Thêm dependency AWS SDK. Cấu hình thông tin đăng nhập AWS (AWS credentials).  package com.movie.aws; import software.amazon.awssdk.services.ec2.Ec2Client; import software.amazon.awssdk.services.ec2.model.*; import software.amazon.awssdk.services.sns.SnsClient; import software.amazon.awssdk.services.sns.model.*; import software.amazon.awssdk.services.cloudwatch.CloudWatchClient; import software.amazon.awssdk.services.cloudwatch.model.*; import java.util.Scanner; public class NetworkAutomationAllInOne { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.print(\u0026#34;Nhập VPC ID: \u0026#34;); String vpcId = sc.nextLine(); System.out.print(\u0026#34;Nhập EC2 Instance ID để gắn alarm: \u0026#34;); String instanceId = sc.nextLine(); System.out.print(\u0026#34;Nhập email nhận cảnh báo SNS: \u0026#34;); String email = sc.nextLine(); try (Ec2Client ec2 = Ec2Client.create(); SnsClient sns = SnsClient.create(); CloudWatchClient cloudWatch = CloudWatchClient.create()) { String sgId = createSecurityGroup(ec2, vpcId); System.out.println(\u0026#34;Security Group ID: \u0026#34; + sgId); String topicArn = createSnsTopic(sns, email); System.out.println(\u0026#34;SNS Topic ARN: \u0026#34; + topicArn); System.out.println(\u0026#34;Vui lòng xác nhận email trước khi alarm hoạt động.\u0026#34;); createCloudWatchAlarm(cloudWatch, instanceId, topicArn); System.out.println(\u0026#34;Hoàn tất! Hạ tầng mạng + giám sát đã được cấu hình.\u0026#34;); } } private static String createSecurityGroup(Ec2Client ec2, String vpcId) { CreateSecurityGroupResponse sgResponse = ec2.createSecurityGroup( CreateSecurityGroupRequest.builder() .groupName(\u0026#34;MovieWebSG\u0026#34;) .description(\u0026#34;SG for Movie Web Java App\u0026#34;) .vpcId(vpcId) .build() ); String sgId = sgResponse.groupId(); ec2.authorizeSecurityGroupIngress(AuthorizeSecurityGroupIngressRequest.builder() .groupId(sgId) .ipPermissions( IpPermission.builder().ipProtocol(\u0026#34;tcp\u0026#34;).fromPort(22).toPort(22) .ipRanges(IpRange.builder().cidrIp(\u0026#34;0.0.0.0/0\u0026#34;).build()).build(), IpPermission.builder().ipProtocol(\u0026#34;tcp\u0026#34;).fromPort(80).toPort(80) .ipRanges(IpRange.builder().cidrIp(\u0026#34;0.0.0.0/0\u0026#34;).build()).build(), IpPermission.builder().ipProtocol(\u0026#34;tcp\u0026#34;).fromPort(443).toPort(443) .ipRanges(IpRange.builder().cidrIp(\u0026#34;0.0.0.0/0\u0026#34;).build()).build(), IpPermission.builder().ipProtocol(\u0026#34;tcp\u0026#34;).fromPort(3306).toPort(3306) .ipRanges(IpRange.builder().cidrIp(\u0026#34;10.0.0.0/16\u0026#34;).build()).build() ) .build()); return sgId; } private static String createSnsTopic(SnsClient sns, String email) { CreateTopicResponse topicResponse = sns.createTopic( CreateTopicRequest.builder().name(\u0026#34;HighCPUAlert\u0026#34;).build() ); String topicArn = topicResponse.topicArn(); sns.subscribe(SubscribeRequest.builder() .protocol(\u0026#34;email\u0026#34;) .endpoint(email) .topicArn(topicArn) .build()); return topicArn; } private static void createCloudWatchAlarm(CloudWatchClient cloudWatch, String instanceId, String topicArn) { PutMetricAlarmRequest alarmRequest = PutMetricAlarmRequest.builder() .alarmName(\u0026#34;HighCPU\u0026#34;) .comparisonOperator(ComparisonOperator.GREATER_THAN_THRESHOLD) .evaluationPeriods(1) .metricName(\u0026#34;CPUUtilization\u0026#34;) .namespace(\u0026#34;AWS/EC2\u0026#34;) .period(300) .statistic(Statistic.AVERAGE) .threshold(70.0) .alarmDescription(\u0026#34;Alarm khi CPU \u0026gt; 70%\u0026#34;) .dimensions(Dimension.builder() .name(\u0026#34;InstanceId\u0026#34;) .value(instanceId) .build()) .actionsEnabled(true) .alarmActions(topicArn) .unit(StandardUnit.PERCENT) .build(); cloudWatch.putMetricAlarm(alarmRequest); } }  Build và chạy Java  mvn clean package java -cp target/aws-networking-1.0.jar com.movie.aws.NetworkAutomationAllInOne  Khi chạy, bạn nhập:  VPC ID (vd: vpc-0a1b2c3d4e5f6g7h)\nEC2 Instance ID để gắn alarm\nEmail nhận cảnh báo → AWS SNS sẽ gửi mail confirm → click link trong mail để xác nhận.   Tạo Security Group\n Sử dụng SDK để tạo Security Group trong VPC. Định nghĩa các luật mở cổng (ví dụ SSH, HTTP).     Tạo CloudWatch Alarm\n Định nghĩa Alarm giám sát các chỉ số như CPU Utilization của EC2. Thiết lập ngưỡng cảnh báo và hành động khi Alarm kích hoạt.     Gửi thông báo qua SNS khi Alarm kích hoạt\n Tạo và cấu hình SNS topic. Đăng ký các subscriber (email, SMS, Lambda). Liên kết SNS topic với Alarm để gửi thông báo tự động.      4.4. Kết quả  Java code có thể tự động tạo và quản lý các tài nguyên mạng và giám sát. Tự động gửi cảnh báo khi có sự cố hoặc điều kiện giám sát vượt ngưỡng. Tăng hiệu quả vận hành và giảm sai sót thủ công trong quản lý hạ tầng AWS.   "},{"uri":"https://QuocTrong21.github.io/FCJ-Workshop/vi/6-cleanup/","title":"Dọn Dẹp tài Nguyên","tags":[],"description":"","content":"Chúng ta sẽ tiến hành dọn dẹp toàn bộ tài nguyên AWS đã tạo trong quá trình thực hành. Hãy thực hiện theo các bước sau để tránh phát sinh chi phí.\n ✅ Xóa IAM User và Access Keys  Vào AWS Management Console \u0026gt; IAM \u0026gt; Users. Chọn user đã tạo (ví dụ: network-automation-user). Xóa các Access Key, Secret Key liên quan. Xóa user nếu không còn dùng.   ✅ Xóa EC2 Instances và Key Pairs  Vào EC2 Dashboard \u0026gt; Instances. Dừng và terminate các instance đã tạo. Xóa các Key Pair không dùng nữa trong phần Key Pairs.   ✅ Xóa Mạng do AWS CLI tạo  Xóa Security Groups đã tạo qua CLI. Xóa Subnet, Route Table, Internet Gateway và cuối cùng là VPC. Lưu ý thứ tự xóa:  Xóa các resource phụ thuộc trước (Subnet, Route Tables associations). Ngắt kết nối Internet Gateway trước khi xóa.\n     ✅ Xóa CloudFormation Stack  Truy cập CloudFormation Console Chọn các stack liên quan đến bài lab. Click Delete và xác nhận xóa stack.   ✅ Xóa các tài nguyên AWS SDK tạo   Nếu có tạo Security Group, EC2, CloudWatch Alarm qua SDK, xóa bằng SDK hoặc qua AWS Console.\n  Xóa CloudWatch Alarm:\n  aws cloudwatch delete-alarm --alarm-name \u0026lt;ALARM_NAME\u0026gt;  Xóa SNS Topic (nếu dùng):  aws sns delete-topic --topic-arn \u0026lt;TopicARN\u0026gt;   ✅ Lưu ý: Sau khi hoàn tất dọn dẹp, bạn có thể vào Billing Dashboard để kiểm tra chi phí và đảm bảo không có tài nguyên nào còn tồn tại.\n  "},{"uri":"https://QuocTrong21.github.io/FCJ-Workshop/vi/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://QuocTrong21.github.io/FCJ-Workshop/vi/tags/","title":"Tags","tags":[],"description":"","content":""}]