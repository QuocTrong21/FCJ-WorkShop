[{"uri":"https://QuocTrong21.github.io/FCJ-Workshop/2-prerequiste/2.1.1-createiam/","title":"Create IAM User and Obtain Access Key, Secret Access Key, Public Key","tags":[],"description":"","content":"1. Create IAM User and Obtain Access Key, Secret Access Key, Public Key To work with AWS CLI, AWS SDK, or CloudFormation, the first step is to create an IAM User with appropriate access permissions and obtain the Access Key and Secret Access Key for configuration.\n Steps to Perform  Log in to the AWS Management Console with Admin privileges. Navigate to IAM \u0026gt; Users \u0026gt; Add user. Enter the user name (e.g., network-automation-user). Select Programmatic access to generate Access Key and Secret Access Key. Assign appropriate permissions, for example:  AmazonEC2FullAccess AmazonVPCFullAccess IAMReadOnlyAccess AdministratorAccess (for testing purposes)   Click Create user and download the CSV file containing the Access Key and Secret Access Key. Create or import an EC2 Key Pair for SSH access (if needed).\n  Important Notes  Protect your Access Key and Secret Key: Do not share or expose them publicly. If the user has broad permissions (AdministratorAccess), use only in testing environments. Use IAM Roles for EC2 instances whenever possible to avoid using Access Keys directly.   Additional References  Guide to Creating IAM User on AWS Managing Access Keys for IAM Users Key Pairs for Amazon EC2  "},{"uri":"https://QuocTrong21.github.io/FCJ-Workshop/1-introduce/","title":"Introduction","tags":[],"description":"","content":"In the context of modern system development and operation, especially for Java web applications running on the AWS platform, the requirements of fast deployment, high security, scalability, and 24/7 availability have become mandatory standards.\nManual infrastructure configuration involves many risks:\n Time-consuming Lack of consistency Difficult to manage configuration versions Hard to control rollback when issues occur   ‚öôÔ∏è What is Network Automation? Network Automation is the use of tools and scripts to automate the process of creating, configuring, monitoring, and managing network infrastructure.\nWith AWS, this includes:\n Provisioning: Automatically creating VPC, Subnet, Internet Gateway, Route Table, Security Group Configuration: Setting access permissions, ports, security rules Monitoring: Monitoring traffic, CPU, connections Rollback: Quickly restoring when deployment errors happen   üõ† Main Tools in the Project  AWS CLI ‚Äì Running scripts to create and configure network via command line AWS SDK for Java ‚Äì Integrating infrastructure management directly from Java applications AWS CloudFormation ‚Äì Describing the entire infrastructure with YAML files (Infrastructure as Code ‚Äì IaC)   üéØ Workshop Goals This workshop will help you:\n Understand how to fully automate AWS network infrastructure for Java web applications Deploy faster, more accurately, and with fewer errors compared to manual operations Combine CLI, Java SDK, and CloudFormation for maximum efficiency Master rollback processes, testing, and configuration version management   ‚úÖ Provisioning \u0026amp; Configuration Automatically create and configure the network from scratch ‚Üí system ready to run Java web applications\n‚úÖ Monitoring \u0026amp; Alerting Integrate CloudWatch Alarms and SNS for timely monitoring and alerts\n‚úÖ Rollback \u0026amp; Version Control Easily revert to stable states when deployment fails, manage configuration history with Git\n üìö Workshop Content  System Architecture Introduction Environment Preparation Automation with AWS CLI Infrastructure as Code with CloudFormation AWS SDK for Java ‚Äì Network Management and Monitoring Deployment of Monitoring \u0026amp; Alerting Testing \u0026amp; Rollback   üß† Final Goal: Build a complete Network Automation framework on AWS for Java web applications ‚Äì fast, secure, scalable, and easy to manage.\n "},{"uri":"https://QuocTrong21.github.io/FCJ-Workshop/","title":"Overview ‚Äì Network Automation with AWS CLI, AWS SDK (Java), and CloudFormation","tags":[],"description":"","content":"Network Automation with AWS CLI, AWS SDK for Java, and CloudFormation Overview This project focuses on Network Automation on AWS for Java web systems.\nThe solution combines AWS CLI, AWS SDK for Java, and AWS CloudFormation to:\n Provisioning: Automatically create VPC, Subnet, Security Group, EC2 instances. Configuration: Configure network resources via CLI and Java SDK. Monitoring: Monitor the system using CloudWatch Alarms and send alerts via SNS. Rollback: Restore infrastructure when deployment errors occur. Documentation: Record processes and architecture.  This approach minimizes manual operations, ensures consistency, and speeds up infrastructure deployment for Java web projects (e.g., a movie streaming web app).\nContents  Introduction Preparation Requirements Automation with AWS CLI IaC Deployment with CloudFormation Network Management via AWS SDK for Java Resource Cleanup  "},{"uri":"https://QuocTrong21.github.io/FCJ-Workshop/2-prerequiste/2.1.2-createec2/","title":"Guide to Creating an EC2 Instance on AWS","tags":[],"description":"","content":"üìå Objective Create an EC2 instance using default configuration to deploy applications or test the environment.\nüß∞ Prerequisites  Valid AWS account Logged into AWS Console or have AWS CLI installed Created a key pair for SSH (if needed)  üõ†Ô∏è Steps to Follow 1. Log in to AWS Console Visit: https://console.aws.amazon.com/ec2/\n2. Create EC2 Instance Method 1: Using AWS Console  Go to EC2 Dashboard Click Launch Instance Enter a name: workshop Select AMI: Amazon Linux 2023 (or Amazon Linux 2) Instance Type: t2.micro (Free tier eligible) Key pair: Choose or create a new one Network Settings:  Allow SSH (port 22) Allow HTTP (port 80) if needed   Storage: Default 8 GB (gp2) Click Launch Instance\n  üß∞ 3. Install AWS CLI on Linux Run the following commands to install AWS CLI v2:\n# Download AWS CLI v2 curl \u0026#34;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\u0026#34; -o \u0026#34;awscliv2.zip\u0026#34; # Unzip the installer unzip awscliv2.zip # Install sudo ./aws/install # Check version aws --version "},{"uri":"https://QuocTrong21.github.io/FCJ-Workshop/2-prerequiste/","title":"Steps to Prepare the Environment for Network Automation on AWS","tags":[],"description":"","content":"\rTo implement network automation on AWS, you need to prepare an environment that includes AWS CLI for interacting with AWS via command line, AWS SDK (Java) for programmatically managing network resources, and AWS CloudFormation for modeling and deploying network infrastructure as Infrastructure as Code (IaC).\n\r üí° If you are not familiar with the tools and services in this guide, please refer to:\n  AWS Command Line Interface (CLI) ‚Äì Overview and Installation AWS SDK for Java ‚Äì Official Documentation AWS CloudFormation ‚Äì Basic Guide   üöÄ Implementation Contents In this section, you will step-by-step build the environment to automate networking on AWS:\n  Create IAM User and obtain Access Key, Secret Access Key, Public Key\n‚Üí Create an IAM User and configure authentication information (access key, secret key).\n  Create EC2 Instance and install AWS CLI\n‚Üí Create an EC2 instance, select an appropriate instance type, configure (VPC, Subnet, Security Group), choose or create a key pair for SSH access, and launch the instance.\n   üëâ After completing these steps, you will have a fully prepared environment to develop and deploy network automation solutions on the AWS platform efficiently and professionally.\n"},{"uri":"https://QuocTrong21.github.io/FCJ-Workshop/3-awscli/","title":"Automation with AWS CLI","tags":[],"description":"","content":"AWS CLI Script for Creating Network and EC2  1. Create VPC VPC_ID=$(aws ec2 create-vpc \\  --cidr-block 10.0.0.0/16 \\  --query \u0026#39;Vpc.VpcId\u0026#39; \\  --output text) echo \u0026#34;VPC ID: $VPC_ID\u0026#34; aws ec2 create-tags --resources $VPC_ID --tags Key=Name,Value=MovieVPC  2. Create Subnet Create a subnet within the newly created VPC, specifying the Availability Zone and CIDR for this subnet.\nSUBNET_ID=$(aws ec2 create-subnet \\  --vpc-id $VPC_ID \\  --cidr-block 10.0.1.0/24 \\  --availability-zone ap-southeast-1a \\  --query \u0026#39;Subnet.SubnetId\u0026#39; \\  --output text) echo \u0026#34;Subnet ID: $SUBNET_ID\u0026#34;  3. Create Internet Gateway and Attach to VPC Create an Internet Gateway to allow internet connectivity for the VPC and attach it to the created VPC.\nIGW_ID=$(aws ec2 create-internet-gateway \\  --query \u0026#39;InternetGateway.InternetGatewayId\u0026#39; \\  --output text) aws ec2 attach-internet-gateway \\  --internet-gateway-id $IGW_ID \\  --vpc-id $VPC_ID # Tag IGW aws ec2 create-tags --resources $IGW_ID --tags Key=Name,Value=MovieIGW  4. Create Route Table and Configure Internet Route Create a Route Table for the VPC, add a route to direct internet traffic to the Internet Gateway, associate this Route Table with the subnet, and enable auto-assign public IP for the subnet.\nRT_ID=$(aws ec2 create-route-table \\  --vpc-id $VPC_ID \\  --query \u0026#39;RouteTable.RouteTableId\u0026#39; \\  --output text) # Assign route 0.0.0.0/0 to IGW aws ec2 create-route \\  --route-table-id $RT_ID \\  --destination-cidr-block 0.0.0.0/0 \\  --gateway-id $IGW_ID # Associate with subnet aws ec2 associate-route-table \\  --route-table-id $RT_ID \\  --subnet-id $SUBNET_ID # Enable auto-assign public IP aws ec2 modify-subnet-attribute --subnet-id $SUBNET_ID --map-public-ip-on-launch  5. Create Security Group Create a new Security Group assigned to the VPC with rules allowing necessary ports such as SSH, HTTP, HTTPS, and MySQL.\nSG_ID=$(aws ec2 create-security-group \\  --group-name MovieSG \\  --description \u0026#34;Allow HTTP, HTTPS, SSH, MySQL\u0026#34; \\  --vpc-id $VPC_ID \\  --query \u0026#39;GroupId\u0026#39; --output text) # Open necessary ports aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 22 --cidr 0.0.0.0/0 aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 80 --cidr 0.0.0.0/0 aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 443 --cidr 0.0.0.0/0 aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 3306 --cidr 10.0.0.0/16 echo \u0026#34;Security Group ID: $SG_ID\u0026#34;  6. Create Key Pair Create a Key Pair to use when SSH connecting to the EC2 Instance, and save the private key for security.\naws ec2 create-key-pair --key-name MovieKey \\  --query \u0026#39;KeyMaterial\u0026#39; --output text \u0026gt; MovieKey.pem chmod 400 MovieKey.pem  7. Create EC2 Instance Launch an EC2 Instance in the created subnet, assign the Security Group and Key Pair for management, and allocate a public IP address.\nINSTANCE_ID=$(aws ec2 run-instances \\  --image-id ami-0df7a207adb9748c7 \\  # Amazon Linux 2 (or Ubuntu depending on region) --instance-type t2.micro \\  --key-name MovieKey \\  --security-group-ids $SG_ID \\  --subnet-id $SUBNET_ID \\  --associate-public-ip-address \\  --query \u0026#39;Instances[0].InstanceId\u0026#39; \\  --output text) echo \u0026#34;EC2 Instance ID: $INSTANCE_ID\u0026#34;  8. Get Public IP of EC2 Instance After the EC2 is running, get the public IP address to access or SSH into the server.\naws ec2 describe-instances --instance-ids $INSTANCE_ID \\  --query \u0026#39;Reservations[0].Instances[0].PublicIpAddress\u0026#39; --output text  You can combine all the above steps into a single AWS CLI script to automate the entire process.\n"},{"uri":"https://QuocTrong21.github.io/FCJ-Workshop/4-cloudformation/","title":"Deploy AWS Network with CloudFormation (IaC)","tags":[],"description":"","content":"1. Create network.yaml file  Prepare the CloudFormation configuration file describing the necessary network resources. Ensure network components are clearly and completely declared.  AWSTemplateFormatVersion: \u0026#39;2010-09-09\u0026#39; Description: Network stack for Movie Web in Sydney Resources: MovieVPC: Type: AWS::EC2::VPC Properties: CidrBlock: 10.0.0.0/16 EnableDnsSupport: true EnableDnsHostnames: true Tags: - Key: Name Value: MovieVPC PublicSubnet: Type: AWS::EC2::Subnet Properties: VpcId: !Ref MovieVPC CidrBlock: 10.0.1.0/24 AvailabilityZone: ap-southeast-2a MapPublicIpOnLaunch: true Tags: - Key: Name Value: PublicSubnet InternetGateway: Type: AWS::EC2::InternetGateway Properties: Tags: - Key: Name Value: MovieIGW AttachGateway: Type: AWS::EC2::VPCGatewayAttachment Properties: VpcId: !Ref MovieVPC InternetGatewayId: !Ref InternetGateway PublicRouteTable: Type: AWS::EC2::RouteTable Properties: VpcId: !Ref MovieVPC Tags: - Key: Name Value: PublicRouteTable PublicRoute: Type: AWS::EC2::Route DependsOn: AttachGateway Properties: RouteTableId: !Ref PublicRouteTable DestinationCidrBlock: 0.0.0.0/0 GatewayId: !Ref InternetGateway SubnetRouteTableAssociation: Type: AWS::EC2::SubnetRouteTableAssociation Properties: SubnetId: !Ref PublicSubnet RouteTableId: !Ref PublicRouteTable MovieSecurityGroup: Type: AWS::EC2::SecurityGroup Properties: GroupDescription: Allow SSH and HTTP VpcId: !Ref MovieVPC SecurityGroupIngress: - IpProtocol: tcp FromPort: 22 ToPort: 22 CidrIp: 0.0.0.0/0 - IpProtocol: tcp FromPort: 80 ToPort: 80 CidrIp: 0.0.0.0/0 Tags: - Key: Name Value: MovieSG Outputs: VPCId: Description: VPC ID Value: !Ref MovieVPC SubnetId: Description: Public Subnet ID Value: !Ref PublicSubnet SecurityGroupId: Description: Security Group ID Value: !Ref MovieSecurityGroup  2. Deploy the stack  Use the aws cloudformation deploy command to create the stack from the network.yaml file. Give the stack a clear name, for example: MyNetworkStack. Provide appropriate permissions when deploying if there are IAM-related resources.  aws cloudformation deploy \\  --template-file network.yaml \\  --stack-name movie-web-network \\  --region ap-southeast-2 \\  --capabilities CAPABILITY_NAMED_IAM  3. Check stack status  Monitor the stack status to know if the deployment was successful or encountered errors. Use AWS CLI commands or the Console to view detailed stack events.  aws cloudformation describe-stacks --stack-name movie-web-network --query \u0026#39;Stacks[0].StackStatus\u0026#39; --output text aws cloudformation describe-stack-events --stack-name movie-web-network --max-items 50  4. Intentionally create an error  Change a parameter or resource to an invalid value (e.g., a non-existent AMI) in the network.yaml file. Re-deploy the stack and observe CloudFormation\u0026rsquo;s automatic rollback process. Use event information to debug and understand how CloudFormation handles errors.  aws cloudformation deploy \\  --template-file network.yaml \\  --stack-name movie-web-network-testfail \\  --parameter-overrides KeyPairName=MovieKey ImageId=ami-00000000 InstanceType=t3.small \\  --capabilities CAPABILITY_IAM  "},{"uri":"https://QuocTrong21.github.io/FCJ-Workshop/5-java-sdk/","title":"Using AWS SDK for Java to Control AWS","tags":[],"description":"","content":"Using AWS SDK for Java Objectives  Write Java code to automatically control AWS resources such as creating Security Groups, setting up CloudWatch Alarms, and sending SNS notifications. Enhance automation and monitoring of AWS systems using Java applications.   Project Structure  Create a Maven project using AWS SDK for Java (version 2.x). Add necessary dependencies including:  EC2 client for managing Security Groups. CloudWatch client for creating and managing Alarms. SNS client for sending notifications when Alarms are triggered.     Implementation Steps   Setup project and AWS SDK\nInitialize Maven project. \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;groupId\u0026gt;com.movie.aws\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;aws-networking\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0\u0026lt;/version\u0026gt; \u0026lt;dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;software.amazon.awssdk\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;bom\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.25.24\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;software.amazon.awssdk\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;ec2\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;software.amazon.awssdk\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;cloudwatch\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;software.amazon.awssdk\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;sns\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-compiler-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.8.1\u0026lt;/version\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;source\u0026gt;17\u0026lt;/source\u0026gt; \u0026lt;target\u0026gt;17\u0026lt;/target\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; \u0026lt;/project\u0026gt;  Add AWS SDK dependency. Configure AWS credentials.  package com.movie.aws; import software.amazon.awssdk.services.ec2.Ec2Client; import software.amazon.awssdk.services.ec2.model.*; import software.amazon.awssdk.services.sns.SnsClient; import software.amazon.awssdk.services.sns.model.*; import software.amazon.awssdk.services.cloudwatch.CloudWatchClient; import software.amazon.awssdk.services.cloudwatch.model.*; import java.util.Scanner; public class NetworkAutomationAllInOne { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.print(\u0026#34;Enter VPC ID: \u0026#34;); String vpcId = sc.nextLine(); System.out.print(\u0026#34;Enter EC2 Instance ID to attach alarm: \u0026#34;); String instanceId = sc.nextLine(); System.out.print(\u0026#34;Enter email for SNS alerts: \u0026#34;); String email = sc.nextLine(); try (Ec2Client ec2 = Ec2Client.create(); SnsClient sns = SnsClient.create(); CloudWatchClient cloudWatch = CloudWatchClient.create()) { String sgId = createSecurityGroup(ec2, vpcId); System.out.println(\u0026#34;Security Group ID: \u0026#34; + sgId); String topicArn = createSnsTopic(sns, email); System.out.println(\u0026#34;SNS Topic ARN: \u0026#34; + topicArn); System.out.println(\u0026#34;Please confirm email before alarm becomes active.\u0026#34;); createCloudWatchAlarm(cloudWatch, instanceId, topicArn); System.out.println(\u0026#34;Complete! Network infrastructure + monitoring has been configured.\u0026#34;); } } private static String createSecurityGroup(Ec2Client ec2, String vpcId) { CreateSecurityGroupResponse sgResponse = ec2.createSecurityGroup( CreateSecurityGroupRequest.builder() .groupName(\u0026#34;MovieWebSG\u0026#34;) .description(\u0026#34;SG for Movie Web Java App\u0026#34;) .vpcId(vpcId) .build() ); String sgId = sgResponse.groupId(); ec2.authorizeSecurityGroupIngress(AuthorizeSecurityGroupIngressRequest.builder() .groupId(sgId) .ipPermissions( IpPermission.builder().ipProtocol(\u0026#34;tcp\u0026#34;).fromPort(22).toPort(22) .ipRanges(IpRange.builder().cidrIp(\u0026#34;0.0.0.0/0\u0026#34;).build()).build(), IpPermission.builder().ipProtocol(\u0026#34;tcp\u0026#34;).fromPort(80).toPort(80) .ipRanges(IpRange.builder().cidrIp(\u0026#34;0.0.0.0/0\u0026#34;).build()).build(), IpPermission.builder().ipProtocol(\u0026#34;tcp\u0026#34;).fromPort(443).toPort(443) .ipRanges(IpRange.builder().cidrIp(\u0026#34;0.0.0.0/0\u0026#34;).build()).build(), IpPermission.builder().ipProtocol(\u0026#34;tcp\u0026#34;).fromPort(3306).toPort(3306) .ipRanges(IpRange.builder().cidrIp(\u0026#34;10.0.0.0/16\u0026#34;).build()).build() ) .build()); return sgId; } private static String createSnsTopic(SnsClient sns, String email) { CreateTopicResponse topicResponse = sns.createTopic( CreateTopicRequest.builder().name(\u0026#34;HighCPUAlert\u0026#34;).build() ); String topicArn = topicResponse.topicArn(); sns.subscribe(SubscribeRequest.builder() .protocol(\u0026#34;email\u0026#34;) .endpoint(email) .topicArn(topicArn) .build()); return topicArn; } private static void createCloudWatchAlarm(CloudWatchClient cloudWatch, String instanceId, String topicArn) { PutMetricAlarmRequest alarmRequest = PutMetricAlarmRequest.builder() .alarmName(\u0026#34;HighCPU\u0026#34;) .comparisonOperator(ComparisonOperator.GREATER_THAN_THRESHOLD) .evaluationPeriods(1) .metricName(\u0026#34;CPUUtilization\u0026#34;) .namespace(\u0026#34;AWS/EC2\u0026#34;) .period(300) .statistic(Statistic.AVERAGE) .threshold(70.0) .alarmDescription(\u0026#34;Alarm when CPU \u0026gt; 70%\u0026#34;) .dimensions(Dimension.builder() .name(\u0026#34;InstanceId\u0026#34;) .value(instanceId) .build()) .actionsEnabled(true) .alarmActions(topicArn) .unit(StandardUnit.PERCENT) .build(); cloudWatch.putMetricAlarm(alarmRequest); } }  Build and run Java  mvn clean package java -cp target/aws-networking-1.0.jar com.movie.aws.NetworkAutomationAllInOne  When running, you enter:  VPC ID (e.g.: vpc-0a1b2c3d4e5f6g7h)\nEC2 Instance ID to attach alarm\nEmail for alerts ‚Üí AWS SNS will send confirmation email ‚Üí click link in email to confirm.   Create Security Group\n Use SDK to create Security Group in VPC. Define rules for opening ports (e.g., SSH, HTTP).     Create CloudWatch Alarm\n Define Alarm to monitor metrics like EC2 CPU Utilization. Set alert thresholds and actions when Alarm triggers.     Send notifications via SNS when Alarm triggers\n Create and configure SNS topic. Register subscribers (email, SMS, Lambda). Link SNS topic with Alarm to send automatic notifications.      Results  Java code can automatically create and manage network resources and monitoring. Automatically send alerts when incidents occur or monitoring conditions exceed thresholds. Increase operational efficiency and reduce manual errors in AWS infrastructure management.   "},{"uri":"https://QuocTrong21.github.io/FCJ-Workshop/6-cleanup/","title":"Resource Cleanup","tags":[],"description":"","content":"We will proceed to clean up all AWS resources created during the practice. Please follow the steps below to avoid incurring unnecessary costs.\n ‚úÖ Delete IAM Users and Access Keys  Go to AWS Management Console \u0026gt; IAM \u0026gt; Users. Select the user you created (e.g., network-automation-user). Delete all related Access Keys and Secret Keys. Delete the user if no longer needed.   ‚úÖ Delete EC2 Instances and Key Pairs  Go to EC2 Dashboard \u0026gt; Instances. Stop and terminate the created instances. Delete unused Key Pairs in the Key Pairs section.   ‚úÖ Delete Network Resources Created by AWS CLI  Delete Security Groups created via CLI. Delete Subnets, Route Tables, Internet Gateways, and finally the VPC. Note the deletion order:  Delete dependent resources first (Subnets, Route Table associations). Detach the Internet Gateway before deleting it.     ‚úÖ Delete CloudFormation Stacks  Go to CloudFormation Console Select the stacks related to the lab. Click Delete and confirm stack deletion.   ‚úÖ Delete Resources Created via AWS SDK   If you created Security Groups, EC2 instances, or CloudWatch Alarms via SDK, delete them either via SDK or AWS Console.\n  Delete CloudWatch Alarm:\n  aws cloudwatch delete-alarm --alarm-name \u0026lt;ALARM_NAME\u0026gt;  Delete SNS Topic:  aws sns delete-topic --topic-arn \u0026lt;TopicARN\u0026gt; ‚úÖ Note: After completing the cleanup, you can check the Billing Dashboard to verify your costs and ensure no resources remain active.\n"},{"uri":"https://QuocTrong21.github.io/FCJ-Workshop/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://QuocTrong21.github.io/FCJ-Workshop/tags/","title":"Tags","tags":[],"description":"","content":""}]