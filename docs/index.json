[{"uri":"https://QuocTrong21.github.io/FCJ-Workshop/","title":"Session Management","tags":[],"description":"","content":"Working with Amazon Systems Manager - Session Manager Overview Amazon Systems Manager ‚Äì Session Manager is a fully managed AWS service that enables secure, auditable, and browser-based shell or CLI access to your Amazon EC2 instances and other AWS resources without requiring an inbound port (such as SSH or RDP) to be open.\nIn this lab, you will:\nLearn the core concepts of Session Manager and its role in secure system administration.\nPractice connecting to public and private EC2 instances in a VPC without using bastion hosts.\nExplore logging and auditing features integrated with AWS CloudTrail and Amazon S3 for compliance.\nUnderstand how Session Manager can improve security posture by eliminating direct inbound connections and centralizing access control.\nThis exercise will help DevOps teams reduce operational risk, simplify infrastructure access management, and enhance overall security visibility.\nContents  Introduction Prerequisites Monitoring Implementation Anomaly Detection Automated Response Escalation Procedures Dashboard Development Operational Procedures  Clean Up Resources  "},{"uri":"https://QuocTrong21.github.io/FCJ-Workshop/1-introduce/","title":"Introduction","tags":[],"description":"","content":"In the context of modern system development and operation, especially for Java web applications running on the AWS platform, the requirements of fast deployment, high security, scalability, and 24/7 availability have become mandatory standards.\nManual infrastructure configuration involves many risks:\n Time-consuming Lack of consistency Difficult to manage configuration versions Hard to control rollback when issues occur   ‚öôÔ∏è What is Network Automation? Network Automation is the use of tools and scripts to automate the process of creating, configuring, monitoring, and managing network infrastructure.\nWith AWS, this includes:\n Provisioning: Automatically creating VPC, Subnet, Internet Gateway, Route Table, Security Group Configuration: Setting access permissions, ports, security rules Monitoring: Monitoring traffic, CPU, connections Rollback: Quickly restoring when deployment errors happen   üõ† Main Tools in the Project  AWS CLI ‚Äì Running scripts to create and configure network via command line AWS SDK for Java ‚Äì Integrating infrastructure management directly from Java applications AWS CloudFormation ‚Äì Describing the entire infrastructure with YAML files (Infrastructure as Code ‚Äì IaC)   üéØ Workshop Goals This workshop will help you:\n Understand how to fully automate AWS network infrastructure for Java web applications Deploy faster, more accurately, and with fewer errors compared to manual operations Combine CLI, Java SDK, and CloudFormation for maximum efficiency Master rollback processes, testing, and configuration version management   ‚úÖ Provisioning \u0026amp; Configuration Automatically create and configure the network from scratch ‚Üí system ready to run Java web applications\n‚úÖ Monitoring \u0026amp; Alerting Integrate CloudWatch Alarms and SNS for timely monitoring and alerts\n‚úÖ Rollback \u0026amp; Version Control Easily revert to stable states when deployment fails, manage configuration history with Git\n üìö Workshop Content  System Architecture Introduction Environment Preparation Automation with AWS CLI Infrastructure as Code with CloudFormation AWS SDK for Java ‚Äì Network Management and Monitoring Deployment of Monitoring \u0026amp; Alerting Testing \u0026amp; Rollback   üß† Final Goal: Build a complete Network Automation framework on AWS for Java web applications ‚Äì fast, secure, scalable, and easy to manage.\n "},{"uri":"https://QuocTrong21.github.io/FCJ-Workshop/2-prerequiste/2.1.1-createiam/","title":"üñ•Ô∏è H∆∞·ªõng D·∫´n T·∫°o EC2 Instance Tr√™n AWS","tags":[],"description":"","content":"üìå M·ª•c Ti√™u T·∫°o m·ªôt EC2 instance s·ª≠ d·ª•ng c·∫•u h√¨nh m·∫∑c ƒë·ªãnh ƒë·ªÉ tri·ªÉn khai ·ª©ng d·ª•ng ho·∫∑c ki·ªÉm th·ª≠ m√¥i tr∆∞·ªùng.\nüß∞ Y√™u C·∫ßu Tr∆∞·ªõc Khi B·∫Øt ƒê·∫ßu  T√†i kho·∫£n AWS h·ª£p l·ªá ƒêƒÉng nh·∫≠p AWS Console ho·∫∑c c√†i s·∫µn AWS CLI T·∫°o key pair ƒë·ªÉ SSH (n·∫øu c·∫ßn)  üõ†Ô∏è C√°c B∆∞·ªõc Th·ª±c Hi·ªán 1. ƒêƒÉng Nh·∫≠p AWS Console Truy c·∫≠p: https://console.aws.amazon.com/ec2/\n2. T·∫°o EC2 Instance C√°ch 1: Qua AWS Console  V√†o EC2 Dashboard Nh·∫•n Launch Instance Nh·∫≠p t√™n: workshop Ch·ªçn AMI: Amazon Linux 2023 (ho·∫∑c Amazon Linux 2) Lo·∫°i Instance: t2.micro (Free tier) Key pair: Ch·ªçn ho·∫∑c t·∫°o m·ªõi Network Settings:  Allow SSH (port 22) Allow HTTP (port 80) n·∫øu c·∫ßn   ·ªî ƒëƒ©a: M·∫∑c ƒë·ªãnh 8 GB (gp2) Nh·∫•n Launch Instance   C√°ch 2: D√πng AWS CLI aws ec2 run-instances --image-id ami-0c02fb55956c7d316 \\ # Amazon Linux 2 (us-east-1) --instance-type t2.micro --key-name my-key --security-groups default --tag-specifications \u0026#39;ResourceType=instance,Tags=[{Key=Name,Value=MyEC2Default}]\u0026#39;  üìù Ghi ch√∫: Thay ami-xxxx v√† my-key b·∫±ng ID v√† key pair t∆∞∆°ng ·ª©ng trong region c·ªßa b·∫°n.\n 3. K·∫øt N·ªëi EC2 B·∫±ng SSH ssh -i my-key.pem ec2-user@\u0026lt;public-ip\u0026gt; ‚úÖ K·∫øt Qu·∫£  EC2 instance ƒë∆∞·ª£c t·∫°o v√† ch·∫°y trong v√†i ph√∫t. C√≥ th·ªÉ SSH ƒë·ªÉ c√†i ƒë·∫∑t th√™m ho·∫∑c tri·ªÉn khai ·ª©ng d·ª•ng.   üßπ M·∫πo Qu·∫£n L√Ω  T·∫Øt ho·∫∑c terminate instance sau khi d√πng ƒë·ªÉ tr√°nh m·∫•t ph√≠. G·∫Øn Elastic IP n·∫øu mu·ªën gi·ªØ IP c·ªë ƒë·ªãnh.  üìö T√†i Li·ªáu Tham Kh·∫£o  EC2 User Guide Amazon Linux AMI  "},{"uri":"https://QuocTrong21.github.io/FCJ-Workshop/2-prerequiste/2.1.2-createec2/","title":"Create Public Subnet","tags":[],"description":"","content":"Create Public Subnet  Click Subnets.   Click Create subnet.  At the Create subnet page.   In the VPC ID section, click Lab VPC. In the Subnet name field, enter Lab Public Subnet. In the Availability Zone section, select the first Availability zone. In the field IPv4 CIRD block enter 10.10.1.0/24.   Scroll to the bottom of the page, click Create subnet.\n  Click Lab Public Subnet.\n   Click Actions. Click Edit subnet settings.  Click Enable auto-assign public IPv4 address.   Click Save.  Click Internet Gateways.   Click Create internet gateway.  At the Create internet gateway page.   In the Name tag field, enter Lab IGW. Click Create internet gateway.  After successful creation, click Actions.   Click Attach to VPC.  At the Attach to VPC page.   In the Available VPCs section, select Lab VPC. Click Attach internet gateway. Check the successful attaching process as shown below.  Next we will create a custom route table to assign to Lab Public Subnet.   Click Route Tables. Click Create route table.  At the Create route table page.   In the Name field, enter Lab Publicrtb. In the VPC section, select Lab VPC. Click Create route table.  After creating the route table successfully.   Click Edit routes.  At the Edit routes page.   Click Add route. In the Destination field, enter 0.0.0.0/0 In the Target section, select Internet Gateway and then select Lab IGW. Click Save changes.  Click the Subnet associations tab.   Click Edit subnet associations to proceed with the associate custom route table we just created in Lab Public Subnet.  At the Edit subnet associations page.   Click on Lab Public Subnet. Click Save associations.  Check that the route table information has been associated with Lab Public Subnet and the internet route information has been pointed to the Internet Gateway as shown below.  "},{"uri":"https://QuocTrong21.github.io/FCJ-Workshop/2-prerequiste/","title":"Steps to Prepare the Environment for Network Automation on AWS","tags":[],"description":"","content":"\rTo implement network automation on AWS, you need to prepare an environment that includes AWS CLI for interacting with AWS via command line, AWS SDK (Java) for programmatically managing network resources, and AWS CloudFormation for modeling and deploying network infrastructure as Infrastructure as Code (IaC).\n\r üí° If you are not familiar with the tools and services in this guide, please refer to:\n  AWS Command Line Interface (CLI) ‚Äì Overview and Installation AWS SDK for Java ‚Äì Official Documentation AWS CloudFormation ‚Äì Basic Guide   üöÄ Implementation Contents In this section, you will step-by-step build the environment to automate networking on AWS:\n  Create IAM User and obtain Access Key, Secret Access Key, Public Key\n‚Üí Create an IAM User and configure authentication information (access key, secret key).\n  Create EC2 Instance and install AWS CLI\n‚Üí Create an EC2 instance, select an appropriate instance type, configure (VPC, Subnet, Security Group), choose or create a key pair for SSH access, and launch the instance.\n   üëâ After completing these steps, you will have a fully prepared environment to develop and deploy network automation solutions on the AWS platform efficiently and professionally.\n"},{"uri":"https://QuocTrong21.github.io/FCJ-Workshop/3-awscli/","title":"Connect to EC2 servers","tags":[],"description":"","content":"In this step, we will connect to our EC2 servers, located in both the public and private subnets.\nContent 3.1. Connect to EC2 Public Server 3.2. Cconnect to EC2 Private Server\n"},{"uri":"https://QuocTrong21.github.io/FCJ-Workshop/4-cloudformation/","title":"Manage session logs","tags":[],"description":"","content":"With Session Manager, we can view the history of connections to instances through Session history. However, we have not seen the details of the commands used in a session.\nIn this section, we will proceed to create an S3 bucket and configure the session logs feature to see the details of the commands used in the session.\nContent:  Update IAM Role Create S3 Bucket Create S3 Gateway endpoint Configure Session logs  "},{"uri":"https://QuocTrong21.github.io/FCJ-Workshop/5-java-sdk/","title":"Port Forwarding","tags":[],"description":"","content":"\rPort Forwarding is a useful way to redirect network traffic from one IP address - Port to another IP address - Port. With Port Forwarding we can access an EC2 instance located in the private subnet from our workstation.\n\rWe will configure Port Forwarding for the RDP connection between our machine and Private Windows Instance located in the private subnet we created for this exercise.\nCreate IAM user with permission to connect SSM  Go to IAM service management console  Click Users , then click Add users.    At the Add user page.  In the User name field, enter Portfwd. Click on Access key - Programmatic access. Click Next: Permissions.     Click Attach existing policies directly.\n In the search box, enter ssm. Click on AmazonSSMFullAccess. Click Next: Tags, click Next: Reviews. Click Create user.    Save Access key ID and Secret access key information to perform AWS CLI configuration.\n  Install and Configure AWS CLI and Session Manager Plugin To perform this hands-on, make sure your workstation has AWS CLI and Session Manager Plugin installed -manager-working-with-install-plugin.html)\nMore hands-on tutorials on installing and configuring the AWS CLI can be found here.\nWith Windows, when extracting the Session Manager Plugin installation folder, run the install.bat file with Administrator permission to perform the installation.\n\rImplement Portforwarding  Run the command below in Command Prompt on your machine to configure Port Forwarding.   aws ssm start-session --target (your ID windows instance) --document-name AWS-StartPortForwardingSession --parameters portNumber=\u0026quot;3389\u0026quot;,localPortNumber=\u0026quot;9999\u0026quot; --region (your region)\r\rWindows Private Instance Instance ID information can be found when you view the EC2 Windows Private Instance server details.\n\r Example command:  C:\\Windows\\system32\u0026gt;aws ssm start-session --target i-06343d7377486760c --document-name AWS-StartPortForwardingSession --parameters portNumber=\u0026quot;3389\u0026quot;,localPortNumber=\u0026quot;9999\u0026quot; --region ap-southeast-1\r\rIf your command gives an error like below: SessionManagerPlugin is not found. Please refer to SessionManager Documentation here: http://docs.aws.amazon.com/console/systems-manager/session-manager-plugin-not-found\nProve that you have not successfully installed the Session Manager Plugin. You may need to relaunch Command Prompt after installing Session Manager Plugin.\n\rConnect to the Private Windows Instance you created using the Remote Desktop tool on your workstation.  In the Computer section: enter localhost:9999.    Return to the administration interface of the System Manager - Session Manager service.  Click tab Session history. We will see session logs with Document name AWS-StartPortForwardingSession.    Congratulations on completing the lab on how to use Session Manager to connect and store session logs in S3 bucket. Remember to perform resource cleanup to avoid unintended costs.\n"},{"uri":"https://QuocTrong21.github.io/FCJ-Workshop/6-cleanup/","title":"Clean Up Resources","tags":[],"description":"","content":"We will proceed to clean up all AWS resources created during the practice session. Please follow the steps below to avoid incurring unnecessary charges.\n ‚úÖ Delete DevOps Guru  Go to the DevOps Guru Console On the left menu, choose Settings. Under CloudFormation stacks, click Delete for the DevOps Guru stack you activated. Confirm deletion if prompted.   ‚úÖ Destroy CDK Stack using cdk destroy  Open the terminal in the directory containing your CDK project. Run the following command to destroy the CDK stack: cdk destroy  When prompted, type y and press Enter. Wait for the stack destruction to complete.    ‚úÖ Delete S3 Bucket  Go to the S3 Console Select the buckets you created (e.g., cdk-bucket-*, log-bucket-*, etc.). Perform the following steps:  Click Empty ‚Üí Type permanently delete ‚Üí Click Empty. Then, click Delete ‚Üí Enter the bucket name ‚Üí Click Delete bucket.     ‚úÖ Delete CloudFormation Stack (if not using CDK)  Go to the CloudFormation Console Select the stacks related to the lab (e.g., DevOpsGuruStack, CDKStack, etc.). Click Delete and confirm deletion.   ‚úÖ Delete CloudWatch Logs / Alarms / Dashboards  Go to the CloudWatch Console  Delete Log Groups:\n Go to Logs \u0026gt; Log groups Select the log groups (e.g., /aws/lambda/..., /aws/events/...) Click Actions \u0026gt; Delete log groups  Delete Alarms:\n Go to Alarms \u0026gt; All alarms Select all alarms ‚Üí Click Actions \u0026gt; Delete  Delete Dashboards:\n Go to Dashboards Select dashboard ‚Üí Click Actions \u0026gt; Delete    ‚úÖ Terminate EC2 Instances  Go to the EC2 Console Go to Instances Select the instances to delete ‚Üí Click Instance state \u0026gt; Terminate instance Confirm Terminate    ‚úÖ Delete VPC  Go to the VPC Console Go to Your VPCs Select the VPC you created ‚Üí Click Actions \u0026gt; Delete VPC Confirm deletion   ‚úÖ Delete Subnets (if not automatically removed with VPC)  In the VPC Console ‚Üí Go to Subnets Select the related subnets (Public, Private) ‚Üí Click Actions \u0026gt; Delete subnet    ‚úÖ Note: After cleaning up, go to the Billing Dashboard to check for any remaining resources and ensure no extra costs are incurred.\n  "},{"uri":"https://QuocTrong21.github.io/FCJ-Workshop/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://QuocTrong21.github.io/FCJ-Workshop/tags/","title":"Tags","tags":[],"description":"","content":""}]