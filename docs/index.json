[{"uri":"https://QuocTrong21.github.io/FCJ-WorkShop/","title":"Session Management","tags":[],"description":"","content":"Working with Amazon Systems Manager - Session Manager Overview Amazon Systems Manager – Session Manager is a fully managed AWS service that enables secure, auditable, and browser-based shell or CLI access to your Amazon EC2 instances and other AWS resources without requiring an inbound port (such as SSH or RDP) to be open.\nIn this lab, you will:\nLearn the core concepts of Session Manager and its role in secure system administration.\nPractice connecting to public and private EC2 instances in a VPC without using bastion hosts.\nExplore logging and auditing features integrated with AWS CloudTrail and Amazon S3 for compliance.\nUnderstand how Session Manager can improve security posture by eliminating direct inbound connections and centralizing access control.\nThis exercise will help DevOps teams reduce operational risk, simplify infrastructure access management, and enhance overall security visibility.\nContents  Introduction Prerequisites Monitoring Implementation Anomaly Detection Automated Response Escalation Procedures Dashboard Development Operational Procedures  Clean Up Resources  "},{"uri":"https://QuocTrong21.github.io/FCJ-WorkShop/1-introduce/","title":"Introduction","tags":[],"description":"","content":"In the context of modern system development and operation, especially for Java web applications running on the AWS platform, the requirements of fast deployment, high security, scalability, and 24/7 availability have become mandatory standards.\nManual infrastructure configuration involves many risks:\n Time-consuming Lack of consistency Difficult to manage configuration versions Hard to control rollback when issues occur   ⚙️ What is Network Automation? Network Automation is the use of tools and scripts to automate the process of creating, configuring, monitoring, and managing network infrastructure.\nWith AWS, this includes:\n Provisioning: Automatically creating VPC, Subnet, Internet Gateway, Route Table, Security Group Configuration: Setting access permissions, ports, security rules Monitoring: Monitoring traffic, CPU, connections Rollback: Quickly restoring when deployment errors happen   🛠 Main Tools in the Project  AWS CLI – Running scripts to create and configure network via command line AWS SDK for Java – Integrating infrastructure management directly from Java applications AWS CloudFormation – Describing the entire infrastructure with YAML files (Infrastructure as Code – IaC)   🎯 Workshop Goals This workshop will help you:\n Understand how to fully automate AWS network infrastructure for Java web applications Deploy faster, more accurately, and with fewer errors compared to manual operations Combine CLI, Java SDK, and CloudFormation for maximum efficiency Master rollback processes, testing, and configuration version management   ✅ Provisioning \u0026amp; Configuration Automatically create and configure the network from scratch → system ready to run Java web applications\n✅ Monitoring \u0026amp; Alerting Integrate CloudWatch Alarms and SNS for timely monitoring and alerts\n✅ Rollback \u0026amp; Version Control Easily revert to stable states when deployment fails, manage configuration history with Git\n 📚 Workshop Content  System Architecture Introduction Environment Preparation Automation with AWS CLI Infrastructure as Code with CloudFormation AWS SDK for Java – Network Management and Monitoring Deployment of Monitoring \u0026amp; Alerting Testing \u0026amp; Rollback   🧠 Final Goal: Build a complete Network Automation framework on AWS for Java web applications – fast, secure, scalable, and easy to manage.\n "},{"uri":"https://QuocTrong21.github.io/FCJ-WorkShop/2-prerequiste/2.1.1-createiam/","title":"🖥️ Hướng Dẫn Tạo EC2 Instance Trên AWS","tags":[],"description":"","content":"📌 Mục Tiêu Tạo một EC2 instance sử dụng cấu hình mặc định để triển khai ứng dụng hoặc kiểm thử môi trường.\n🧰 Yêu Cầu Trước Khi Bắt Đầu  Tài khoản AWS hợp lệ Đăng nhập AWS Console hoặc cài sẵn AWS CLI Tạo key pair để SSH (nếu cần) c  🛠️ Các Bước Thực Hiện 1. Đăng Nhập AWS Console Truy cập: https://console.aws.amazon.com/ec2/\n2. Tạo EC2 Instance Cách 1: Qua AWS Console  Vào EC2 Dashboard Nhấn Launch Instance Nhập tên: workshop Chọn AMI: Amazon Linux 2023 (hoặc Amazon Linux 2) Loại Instance: t2.micro (Free tier) Key pair: Chọn hoặc tạo mới Network Settings:  Allow SSH (port 22) Allow HTTP (port 80) nếu cần   Ổ đĩa: Mặc định 8 GB (gp2) Nhấn Launch Instance   Cách 2: Dùng AWS CLI aws ec2 run-instances --image-id ami-0c02fb55956c7d316 \\ # Amazon Linux 2 (us-east-1) --instance-type t2.micro --key-name my-key --security-groups default --tag-specifications \u0026#39;ResourceType=instance,Tags=[{Key=Name,Value=MyEC2Default}]\u0026#39;  📝 Ghi chú: Thay ami-xxxx và my-key bằng ID và key pair tương ứng trong region của bạn.\n 3. Kết Nối EC2 Bằng SSH ssh -i my-key.pem ec2-user@\u0026lt;public-ip\u0026gt; ✅ Kết Quả  EC2 instance được tạo và chạy trong vài phút. Có thể SSH để cài đặt thêm hoặc triển khai ứng dụng.   🧹 Mẹo Quản Lý  Tắt hoặc terminate instance sau khi dùng để tránh mất phí. Gắn Elastic IP nếu muốn giữ IP cố định.  📚 Tài Liệu Tham Khảo  EC2 User Guide Amazon Linux AMI  "},{"uri":"https://QuocTrong21.github.io/FCJ-WorkShop/2-prerequiste/","title":"Steps to Prepare the Environment for Network Automation on AWS","tags":[],"description":"","content":"\rTo implement network automation on AWS, you need to prepare an environment that includes AWS CLI for interacting with AWS via command line, AWS SDK (Java) for programmatically managing network resources, and AWS CloudFormation for modeling and deploying network infrastructure as Infrastructure as Code (IaC).\n\r 💡 If you are not familiar with the tools and services in this guide, please refer to:\n  AWS Command Line Interface (CLI) – Overview and Installation AWS SDK for Java – Official Documentation AWS CloudFormation – Basic Guide   🚀 Implementation Contents In this section, you will step-by-step build the environment to automate networking on AWS:\n  Create IAM User and obtain Access Key, Secret Access Key, Public Key\n→ Create an IAM User and configure authentication information (access key, secret key).\n  Create EC2 Instance and install AWS CLI\n→ Create an EC2 instance, select an appropriate instance type, configure (VPC, Subnet, Security Group), choose or create a key pair for SSH access, and launch the instance.\n   👉 After completing these steps, you will have a fully prepared environment to develop and deploy network automation solutions on the AWS platform efficiently and professionally.\n"},{"uri":"https://QuocTrong21.github.io/FCJ-WorkShop/3-awscli/","title":"Connect to EC2 servers","tags":[],"description":"","content":"In this step, we will connect to our EC2 servers, located in both the public and private subnets.\nContent 3.1. Connect to EC2 Public Server 3.2. Cconnect to EC2 Private Server\n"},{"uri":"https://QuocTrong21.github.io/FCJ-WorkShop/2-prerequiste/2.1.2-createec2/","title":"Triển Khai Docker Image Lên AWS ECR Trên Linux ","tags":[],"description":"","content":"🎯 Mục Tiêu Hướng dẫn cài đặt AWS CLI, cấu hình tài khoản AWS, tạo repository trên Amazon ECR, và đẩy Docker image từ máy local (bao gồm cả image MySQL) lên ECR.\n 🧰 1. Cài Đặt AWS CLI Trên Linux Chạy các lệnh sau để cài đặt AWS CLI v2:\n# Tải AWS CLI v2 curl \u0026#34;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\u0026#34; -o \u0026#34;awscliv2.zip\u0026#34; # Giải nén unzip awscliv2.zip # Cài đặt sudo ./aws/install # Kiểm tra phiên bản aws --version  ⚙️ 2. Cấu Hình AWS CLI Sau khi cài đặt, chạy lệnh sau để cấu hình thông tin tài khoản:\naws configure Nhập các thông tin:\n AWS Access Key ID: từ IAM user AWS Secret Access Key: từ IAM user Default region name: ap-northeast-1 (hoặc vùng bạn sử dụng) Default output format: json   📦 3. Tạo ECR Repository Trên AWS Console  Truy cập: https://console.aws.amazon.com/ecr Chọn Repositories → Create repository Nhập tên repository: webenglish Chọn Private, giữ thiết lập mặc định Nhấn Create repository  Bạn sẽ nhận được URI như sau:\n466322313916.dkr.ecr.ap-northeast-1.amazonaws.com/webenglish\r 🏗 4. Xây Dựng Docker Image Ứng Dụng Di chuyển đến thư mục có Dockerfile và build image:\ndocker build -t webenglish-app .  🔐 5. Đăng Nhập Vào Amazon ECR Trước khi push, bạn cần đăng nhập vào ECR:\naws ecr get-login-password --region ap-northeast-1 | \\ docker login --username AWS \\ --password-stdin 466322313916.dkr.ecr.ap-northeast-1.amazonaws.com  🏷 6. Tag Docker Image Với ECR URI docker tag webenglish-app:latest \\ 466322313916.dkr.ecr.ap-northeast-1.amazonaws.com/webenglish:webenglish-app  🚀 7. Push Docker Image Lên ECR docker push \\ 466322313916.dkr.ecr.ap-northeast-1.amazonaws.com/webenglish:webenglish-app  🐬 8. Đẩy Image MySQL 8.0 Lên ECR (Tuỳ chọn) Nếu bạn đã pull/build image MySQL 8.0 và image ID là 7d4e34ccfad4, bạn có thể tag và push như sau:\n✅ Gắn tag MySQL image docker tag 7d4e34ccfad4 \\ 466322313916.dkr.ecr.ap-northeast-1.amazonaws.com/webenglish:mysql-8.0 📌 Lưu ý: Bạn có thể thay mysql-8.0 bằng latest nếu muốn.\n✅ Push MySQL image lên ECR docker push \\ 466322313916.dkr.ecr.ap-northeast-1.amazonaws.com/webenglish:mysql-8.0 ⏳ Kích thước image MySQL khoảng 772MB — quá trình push có thể mất vài phút.\n 📋 9. Kiểm Tra Trên AWS Console Sau khi push xong:\n Truy cập lại AWS Console → ECR Vào repository webenglish Xác minh đã có các image với tag: webenglish-app, mysql-8.0, v.v.   📝 10. Lưu Ý Bổ Sung  Docker cần được cài đặt và chạy: sudo systemctl start docker  Tài khoản IAM phải có quyền:  AmazonEC2ContainerRegistryFullAccess   Bạn có thể sử dụng image từ ECR để triển khai container trên:  EC2 ECS EKS     📚 11. Tài Liệu Tham Khảo  AWS CLI Install Guide Amazon ECR Documentation Docker CLI Docs   "},{"uri":"https://QuocTrong21.github.io/FCJ-WorkShop/4-cloudformation/","title":"Triển khai Tính năng Cảnh Báo và Phản Hồi Tự Động cho WebEnglish","tags":[],"description":"","content":" 🚨 Triển khai Cảnh Báo và Phản Hồi Tự Động với CloudWatch, SNS và Lambda Tài liệu này hướng dẫn chi tiết cách tích hợp Amazon CloudWatch, SNS, Lambda, và (tuỳ chọn) DevOps Guru để phát hiện bất thường và tự động phản ứng trong hệ thống WebEnglish.\n 🎯 Mục Tiêu  Phát hiện bất thường hiệu suất của EC2 hoặc ECS. Gửi cảnh báo qua email và kích hoạt Lambda để phản ứng. Tự động điều chỉnh số lượng task của dịch vụ ECS hoặc khởi động lại.   ✅ 1. Tạo CloudWatch Anomaly Detector Tạo trình phát hiện bất thường cho chỉ số cpu_usage_active trong namespace WebEnglishMetrics.\naws cloudwatch put-anomaly-detector \\ --namespace \u0026#34;WebEnglishMetrics\u0026#34; \\ --metric-name \u0026#34;cpu_usage_active\u0026#34; \\ --stat \u0026#34;Average\u0026#34; \\ --dimensions Name=InstanceId,Value=i-0817b4fd50252b509 \\ --region ap-northeast-1  ✅ 2. Tạo SNS Topic và Đăng ký Email Tạo một SNS topic để gửi cảnh báo và đăng ký một email để nhận thông báo.\naws sns create-topic --name WebEnglishAlerts --region ap-northeast-1 aws sns subscribe \\ --topic-arn arn:aws:sns:ap-northeast-1:\u0026lt;ACCOUNT_ID\u0026gt;:WebEnglishAlerts \\ --protocol email \\ --notification-endpoint your-email@example.com \\ --region ap-northeast-1  📩 Đừng quên xác nhận email trong hộp thư đến để kích hoạt subscription.   ✅ 3. Tạo CloudWatch Alarm từ Anomaly Detector Tạo một cảnh báo để kích hoạt khi chỉ số cpu_usage_active vượt quá ngưỡng bất thường.\naws cloudwatch put-metric-alarm \\ --alarm-name CPUAnomalyAlarm \\ --evaluation-periods 2 \\ --datapoints-to-alarm 2 \\ --treat-missing-data notBreaching \\ --comparison-operator GreaterThanUpperThreshold \\ --metrics \u0026#39;[ { \u0026#34;Id\u0026#34;: \u0026#34;m1\u0026#34;, \u0026#34;MetricStat\u0026#34;: { \u0026#34;Metric\u0026#34;: { \u0026#34;Namespace\u0026#34;: \u0026#34;WebEnglishMetrics\u0026#34;, \u0026#34;MetricName\u0026#34;: \u0026#34;cpu_usage_active\u0026#34;, \u0026#34;Dimensions\u0026#34;: [ { \u0026#34;Name\u0026#34;: \u0026#34;InstanceId\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;i-0817b4fd50252b509\u0026#34; } ] }, \u0026#34;Period\u0026#34;: 60, \u0026#34;Stat\u0026#34;: \u0026#34;Average\u0026#34; }, \u0026#34;ReturnData\u0026#34;: true }, { \u0026#34;Id\u0026#34;: \u0026#34;ad1\u0026#34;, \u0026#34;Expression\u0026#34;: \u0026#34;ANOMALY_DETECTION_BAND(m1, 2)\u0026#34;, \u0026#34;Label\u0026#34;: \u0026#34;AnomalyDetectionBand\u0026#34;, \u0026#34;ReturnData\u0026#34;: true } ]\u0026#39; \\ --threshold-metric-id ad1 \\ --alarm-actions arn:aws:sns:ap-northeast-1:\u0026lt;ACCOUNT_ID\u0026gt;:WebEnglishAlerts \\ --region ap-northeast-1  ✅ 4. Tạo Lambda để Scale ECS A. Tạo IAM Role Tạo IAM role LambdaScaleECSRole với chính sách tin cậy cho Lambda.\naws iam create-role \\ --role-name LambdaScaleECSRole \\ --assume-role-policy-document file://trust-policy.json Nội dung file trust-policy.json:\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;Service\u0026#34;: \u0026#34;lambda.amazonaws.com\u0026#34; }, \u0026#34;Action\u0026#34;: \u0026#34;sts:AssumeRole\u0026#34; } ] } B. Gắn Policy cần thiết Gắn các chính sách cần thiết để Lambda có thể ghi log và tương tác với ECS.\naws iam attach-role-policy \\ --role-name LambdaScaleECSRole \\ --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole aws iam attach-role-policy \\ --role-name LambdaScaleECSRole \\ --policy-arn arn:aws:iam::aws:policy/AmazonECS_FullAccess  ✅ 5. Tạo Hàm Lambda scale_ecs_service.py Hàm Python này sẽ gọi API của AWS để điều chỉnh số lượng task mong muốn của dịch vụ ECS.\nimport boto3 def lambda_handler(event, context): ecs = boto3.client(\u0026#39;ecs\u0026#39;) cluster = \u0026#39;MyCluster\u0026#39; service = \u0026#39;WebenglishService\u0026#39; desired_count = 2 try: response = ecs.update_service( cluster=cluster, service=service, desiredCount=desired_count ) print(\u0026#34;Service updated:\u0026#34;, response[\u0026#39;service\u0026#39;][\u0026#39;serviceName\u0026#39;]) return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: \u0026#39;Scaling executed\u0026#39; } except Exception as e: print(\u0026#34;Error:\u0026#34;, str(e)) return { \u0026#39;statusCode\u0026#39;: 500, \u0026#39;body\u0026#39;: str(e) } Nén file:\nzip function.zip scale_ecs_service.py  ✅ 6. Tạo Lambda Function Tạo hàm Lambda có tên ScaleWebEnglish từ file nén vừa tạo.\naws lambda create-function \\ --function-name ScaleWebEnglish \\ --runtime python3.9 \\ --role arn:aws:iam::\u0026lt;ACCOUNT_ID\u0026gt;:role/LambdaScaleECSRole \\ --handler scale_ecs_service.lambda_handler \\ --zip-file fileb://function.zip \\ --timeout 10 \\ --region ap-northeast-1  ✅ 7. Gắn Lambda vào SNS và Cấp Quyền Đăng ký Lambda vào SNS topic để nó có thể được kích hoạt khi có cảnh báo.\naws sns subscribe \\ --topic-arn arn:aws:sns:ap-northeast-1:\u0026lt;ACCOUNT_ID\u0026gt;:WebEnglishAlerts \\ --protocol lambda \\ --notification-endpoint arn:aws:lambda:ap-northeast-1:\u0026lt;ACCOUNT_ID\u0026gt;:function:ScaleWebEnglish \\ --region ap-northeast-1 Cấp quyền cho SNS gọi Lambda:\naws lambda add-permission \\ --function-name ScaleWebEnglish \\ --statement-id snsInvokePermission \\ --action lambda:InvokeFunction \\ --principal sns.amazonaws.com \\ --source-arn arn:aws:sns:ap-northeast-1:\u0026lt;ACCOUNT_ID\u0026gt;:WebEnglishAlerts \\ --region ap-northeast-1  ✅ 8. (Tùy chọn) Tạo Step Function cho Scale ECS Sử dụng Step Functions để tạo luồng công việc tự động.\nFile scale-ecs-step.json { \u0026#34;Comment\u0026#34;: \u0026#34;Scale ECS when high CPU\u0026#34;, \u0026#34;StartAt\u0026#34;: \u0026#34;ScaleService\u0026#34;, \u0026#34;States\u0026#34;: { \u0026#34;ScaleService\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Task\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:states:::aws-sdk:ecs:updateService\u0026#34;, \u0026#34;Parameters\u0026#34;: { \u0026#34;Cluster\u0026#34;: \u0026#34;MyCluster\u0026#34;, \u0026#34;Service\u0026#34;: \u0026#34;WebenglishService\u0026#34;, \u0026#34;DesiredCount\u0026#34;: 2 }, \u0026#34;End\u0026#34;: true } } } Tạo role cho Step Function aws iam create-role \\ --role-name StepFunctionExecutionRole \\ --assume-role-policy-document file://stepfunction-trust-policy.json aws iam attach-role-policy \\ --role-name StepFunctionExecutionRole \\ --policy-arn arn:aws:iam::aws:policy/AmazonECS_FullAccess Tạo State Machine aws stepfunctions create-state-machine \\ --name ScaleWebEnglishStepFunction \\ --definition file://scale-ecs-step.json \\ --role-arn arn:aws:iam::\u0026lt;ACCOUNT_ID\u0026gt;:role/StepFunctionExecutionRole \\ --type STANDARD \\ --region ap-northeast-1  ✅ 9. Kiểm Thử Hệ Thống    Mục tiêu Cách kiểm thử     Tăng CPU stress-ng hoặc endpoint Spring Boot   Log Lambda CloudWatch Logs → /aws/lambda/ScaleWebEnglish   Scale ECS Console → WebenglishService   Hoạt động SNS Gửi thử message bằng CLI    🔹 Tăng CPU (Ubuntu): sudo apt update \u0026amp;\u0026amp; sudo apt install stress-ng -y stress-ng --cpu 2 --timeout 300s 🔹 Hoặc endpoint Spring Boot: @GetMapping(\u0026#34;/load-cpu\u0026#34;) public String loadCpu() { while (true) { Math.pow(Math.random(), Math.random()); } } Gọi endpoint:\ncurl http://your-ecs-app/load-cpu 🔹 Test SNS → Lambda: aws sns publish \\ --topic-arn arn:aws:sns:ap-northeast-1:\u0026lt;ACCOUNT_ID\u0026gt;:WebEnglishAlerts \\ --message \u0026#39;{\u0026#34;test\u0026#34;: \u0026#34;SNS to Lambda\u0026#34;}\u0026#39; \\ --region ap-northeast-1  ✅ 10. Mẹo Debug \u0026amp; Tối Ưu    Thành phần Lưu ý     Lambda Thêm xử lý exception rõ ràng và log chi tiết.   IAM Role Chỉ cấp quyền tối thiểu cần thiết để tuân thủ nguyên tắc Least Privilege.   ECS Cân nhắc sử dụng chính sách Target Tracking Policy thay vì điều chỉnh thủ công trong Lambda.   Alarm Điều chỉnh evaluation-periods hợp lý để tránh cảnh báo giả.    📌 Test thủ công Lambda nếu cần:\naws lambda invoke \\ --function-name ScaleWebEnglish \\ --payload \u0026#39;{}\u0026#39; \\ output.json \\ --region ap-northeast-1 "},{"uri":"https://QuocTrong21.github.io/FCJ-WorkShop/5-java-sdk/","title":"Automated Response","tags":[],"description":"","content":"  🚨 Triển Khai Hệ Thống Cảnh Báo \u0026amp; Leo Thang Sự Cố Chuyên Nghiệp  Mục tiêu: Hệ thống cảnh báo đa cấp, tự động phát hiện bất thường, gửi cảnh báo đến đúng người, và tự phản hồi nếu cần.\n  📌 1. Thiết Kế Quy Trình Cảnh Báo 3 Cấp    Cấp Tên Người nhận Thời gian phản hồi Công cụ     1 Cảnh báo kỹ thuật (DevOps) Nhóm DevOps ≤ 15 phút Email / SNS   2 Cảnh báo gấp (On-call) Dev trực hotline ≤ 5 phút SNS + Lambda   3 Cảnh báo quản lý (Manager) Quản lý cấp cao Trong giờ hành chính Email / SMS     🧪 2. Tạo SNS Topic và Subscriptions 2.1 Tạo các SNS Topic aws sns create-topic --name WebEnglishAlert-Level1 aws sns create-topic --name WebEnglishAlert-Level2 aws sns create-topic --name WebEnglishAlert-Level3 2.2 Đăng ký Email vào Topic (phải xác nhận) aws sns subscribe \\  --topic-arn arn:aws:sns:ap-northeast-1:\u0026lt;ACCOUNT_ID\u0026gt;:WebEnglishAlert-Level1 \\  --protocol email \\  --notification-endpoint devops@example.com aws sns subscribe \\  --topic-arn arn:aws:sns:ap-northeast-1:\u0026lt;ACCOUNT_ID\u0026gt;:WebEnglishAlert-Level3 \\  --protocol email \\  --notification-endpoint ceo@example.com  ✅ Kiểm tra email để xác nhận (Confirm Subscription).   📈 3. Tạo CloudWatch Alarm - Level 1 aws cloudwatch put-metric-alarm \\  --alarm-name CPU-High-Level1 \\  --alarm-description \u0026#34;Cảnh báo CPU cao - cấp 1\u0026#34; \\  --metric-name cpu_usage_active \\  --namespace WebEnglishMetrics \\  --statistic Average \\  --period 300 \\  --evaluation-periods 1 \\  --threshold 80 \\  --comparison-operator GreaterThanThreshold \\  --actions-enabled \\  --alarm-actions arn:aws:sns:ap-northeast-1:\u0026lt;ACCOUNT_ID\u0026gt;:WebEnglishAlert-Level1  🛠 4. Lambda Leo Thang 4.1 Tạo IAM Role cho Lambda trust-policy.json\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [{ \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;Service\u0026#34;: \u0026#34;lambda.amazonaws.com\u0026#34; }, \u0026#34;Action\u0026#34;: \u0026#34;sts:AssumeRole\u0026#34; }] } aws iam create-role \\  --role-name LambdaAlertEscalatorRole \\  --assume-role-policy-document file://trust-policy.json aws iam attach-role-policy \\  --role-name LambdaAlertEscalatorRole \\  --policy-arn arn:aws:iam::aws:policy/CloudWatchReadOnlyAccess aws iam attach-role-policy \\  --role-name LambdaAlertEscalatorRole \\  --policy-arn arn:aws:iam::aws:policy/AmazonSNSFullAccess  4.2 Mã Lambda: alert_escalator.py import boto3 def lambda_handler(event, context): cloudwatch = boto3.client(\u0026#39;cloudwatch\u0026#39;) sns = boto3.client(\u0026#39;sns\u0026#39;) alarm_name = \u0026#34;CPU-High-Level1\u0026#34; response = cloudwatch.describe_alarms(AlarmNames=[alarm_name]) if response[\u0026#39;MetricAlarms\u0026#39;] and response[\u0026#39;MetricAlarms\u0026#39;][0][\u0026#39;StateValue\u0026#39;] == \u0026#34;ALARM\u0026#34;: sns.publish( TopicArn=\u0026#34;arn:aws:sns:ap-northeast-1:\u0026lt;ACCOUNT_ID\u0026gt;:WebEnglishAlert-Level2\u0026#34;, Subject=\u0026#34;🚨 Cảnh báo leo thang\u0026#34;, Message=f\u0026#34;Alarm {alarm_name}vẫn chưa được xử lý. Đang leo thang lên cấp 2.\u0026#34; )  4.3 Deploy Lambda Function zip function.zip alert_escalator.py aws lambda create-function \\  --function-name alertEscalator \\  --runtime python3.12 \\  --role arn:aws:iam::\u0026lt;ACCOUNT_ID\u0026gt;:role/LambdaAlertEscalatorRole \\  --handler alert_escalator.lambda_handler \\  --zip-file fileb://function.zip \\  --timeout 10  ✅ Bạn có thể test thử bằng AWS Console → Lambda → Test   📈 5. Tạo Alarm Gọi Lambda - Level 2 aws cloudwatch put-metric-alarm \\  --alarm-name CPU-High-Level2 \\  --alarm-description \u0026#34;Leo thang cảnh báo CPU cao\u0026#34; \\  --metric-name cpu_usage_active \\  --namespace WebEnglishMetrics \\  --statistic Average \\  --period 600 \\  --evaluation-periods 2 \\  --threshold 80 \\  --comparison-operator GreaterThanThreshold \\  --actions-enabled \\  --alarm-actions arn:aws:lambda:ap-northeast-1:\u0026lt;ACCOUNT_ID\u0026gt;:function:alertEscalator  🔁 Tổng Quan Leo Thang    Cấp Alarm Điều kiện Hành động     1 CPU-High-Level1 1 × 5 phút \u0026gt; 80% Gửi SNS Level 1 → DevOps   2 CPU-High-Level2 2 × 10 phút \u0026gt; 80% Gọi Lambda → gửi SNS Level 2 (gọi người trực hotline)   3 (tùy chọn mở rộng) Không xử lý sau 30p Gửi SNS Level 3 → quản lý cấp cao qua email/sms     📊 6. CloudWatch Anomaly Detection (Tùy chọn nâng cao) aws cloudwatch put-anomaly-detector \\  --namespace WebEnglishMetrics \\  --metric-name cpu_usage_active \\  --statistic Average \\  --dimensions Name=InstanceId,Value=i-xxxxxx  🌀 7. Step Functions (Tùy chọn tự động phản hồi) Sử dụng để:\n Scale ECS Service Reboot EC2 Instance Gửi chuỗi hành động khi phát hiện sự cố   🧪 8. Kiểm thử hệ thống sudo yum install -y stress-ng stress-ng --cpu 4 --timeout 600s Bạn có thể gửi metric giả vào CloudWatch để test hệ thống hoạt động:\naws cloudwatch put-metric-data \\  --metric-name cpu_usage_active \\  --namespace WebEnglishMetrics \\  --value 90 Kiểm tra:\n SNS gửi đúng người? Lambda có được kích hoạt? Escalation có được thực hiện? Email xác nhận đã được nhấn chưa?   📘 9. Tổng Kết ✅ Hệ thống cảnh báo nhiều cấp hoạt động chuẩn:\n CloudWatch theo dõi \u0026amp; phát hiện bất thường SNS phân tầng cảnh báo đúng người Lambda phản ứng khi cảnh báo chưa được xử lý Mở rộng với Step Functions, PagerDuty, EC2 auto recovery\u0026hellip;    🧩 Gợi ý nâng cao  Dùng CloudFormation / CDK để mã hóa toàn bộ hạ tầng này Ghi log vào CloudWatch Logs để tracking escalation Tạo Dead Letter Queue cho Lambda nếu bị lỗi   "},{"uri":"https://QuocTrong21.github.io/FCJ-WorkShop/6-cleanup/","title":"Clean Up Resources","tags":[],"description":"","content":"We will proceed to clean up all AWS resources created during the practice session. Please follow the steps below to avoid incurring unnecessary charges.\n ✅ Delete DevOps Guru  Go to the DevOps Guru Console On the left menu, choose Settings. Under CloudFormation stacks, click Delete for the DevOps Guru stack you activated. Confirm deletion if prompted.   ✅ Destroy CDK Stack using cdk destroy  Open the terminal in the directory containing your CDK project. Run the following command to destroy the CDK stack: cdk destroy  When prompted, type y and press Enter. Wait for the stack destruction to complete.    ✅ Delete S3 Bucket  Go to the S3 Console Select the buckets you created (e.g., cdk-bucket-*, log-bucket-*, etc.). Perform the following steps:  Click Empty → Type permanently delete → Click Empty. Then, click Delete → Enter the bucket name → Click Delete bucket.     ✅ Delete CloudFormation Stack (if not using CDK)  Go to the CloudFormation Console Select the stacks related to the lab (e.g., DevOpsGuruStack, CDKStack, etc.). Click Delete and confirm deletion.   ✅ Delete CloudWatch Logs / Alarms / Dashboards  Go to the CloudWatch Console  Delete Log Groups:\n Go to Logs \u0026gt; Log groups Select the log groups (e.g., /aws/lambda/..., /aws/events/...) Click Actions \u0026gt; Delete log groups  Delete Alarms:\n Go to Alarms \u0026gt; All alarms Select all alarms → Click Actions \u0026gt; Delete  Delete Dashboards:\n Go to Dashboards Select dashboard → Click Actions \u0026gt; Delete    ✅ Terminate EC2 Instances  Go to the EC2 Console Go to Instances Select the instances to delete → Click Instance state \u0026gt; Terminate instance Confirm Terminate    ✅ Delete VPC  Go to the VPC Console Go to Your VPCs Select the VPC you created → Click Actions \u0026gt; Delete VPC Confirm deletion   ✅ Delete Subnets (if not automatically removed with VPC)  In the VPC Console → Go to Subnets Select the related subnets (Public, Private) → Click Actions \u0026gt; Delete subnet    ✅ Note: After cleaning up, go to the Billing Dashboard to check for any remaining resources and ensure no extra costs are incurred.\n  "},{"uri":"https://QuocTrong21.github.io/FCJ-WorkShop/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://QuocTrong21.github.io/FCJ-WorkShop/tags/","title":"Tags","tags":[],"description":"","content":""}]